{"version":3,"sources":["components/top-page/top-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TopPageComponent","handleDown","e","preventDefault","props","scrollDown","style","overflowY","position","width","height","Container","fluid","className","alt","src","onClick","this","href","Row","Col","md","IconButton","target","fontSize","React","Component","App","handlePageChange","number","setState","currPage","_","state","pageOnChange","customPageNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2cAWqBA,E,4MAEjBC,WAAa,SAAAC,GACTA,EAAEC,iBACF,EAAKC,MAAMC,c,uDAIX,OAAO,yBAAKC,MAAO,CAACC,UAAW,SAAUC,SAAU,WAAYC,MAAO,QAASC,OAAQ,UACnF,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACN,MAAO,CAACI,OAAQ,SAC7B,yBAAKG,UAAW,gBACZ,yBAAKC,IAAK,aACLC,IAAK,sFACLF,UAAW,QAEpB,6BAASA,UAAU,eAEf,uBAAGG,QAASC,KAAKhB,WAAYiB,KAAK,IAAG,+BAAa,+BAAa,+BAA/D,SACJ,kBAACC,EAAA,EAAD,CAAKb,MAAO,CAACI,OAAQ,OAAQD,MAAO,SAChC,kBAACW,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKR,UAAW,mBACZ,wBAAIA,UAAW,QAAf,wBACA,6BACA,yBAAKA,UAAW,WAAhB,mIACoI,6BADpI,+BAGA,yBAAKA,UAAW,oBACZ,kBAACS,EAAA,EAAD,CAAYJ,KAAM,iCAAkCK,OAAQ,UACxD,kBAAC,IAAD,CAAiBC,SAAU,QAASX,UAAW,sBAEnD,kBAACS,EAAA,EAAD,CAAYJ,KAAM,iCAAkCK,OAAQ,UACxD,kBAAC,IAAD,CAAYC,SAAU,QAASX,UAAW,sBAE9C,kBAACS,EAAA,EAAD,CAAYJ,KAAM,sCAAuCK,OAAQ,UAC7D,kBAAC,IAAD,CAAcC,SAAU,QAASX,UAAW,sBAEhD,kBAACS,EAAA,EAAD,CAAYJ,KAAM,oCAAqCK,OAAQ,UAC3D,kBAAC,IAAD,CAAeC,SAAU,QAASX,UAAW,yBAK7D,kBAACO,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKR,UAAW,mBACZ,yBAAKA,UAAW,yBACZ,yBAAKC,IAAK,GAAIR,MAAO,CAACG,MAAO,QACxBM,IAAK,qH,GA9CIU,IAAMC,WC0BrCC,E,kDA/BX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAMVwB,iBAAmB,SAAAC,GACf,EAAKC,SAAS,CAACC,SAAUF,KARV,EAWnBxB,WAAa,SAAA2B,GACT,EAAKF,SAAS,CAACC,SAAU,EAAKE,MAAMF,SAAS,KAV7C,EAAKE,MAAQ,CACTF,SAAU,MAHC,E,qDAiBf,OACI,yBAAKlB,UAAU,OACX,kBAAC,IAAD,CACIqB,aAAcjB,KAAKW,iBACnBO,iBAAkBlB,KAAKgB,MAAMF,UAE7B,kBAAC,EAAD,CAAkB1B,WAAYY,KAAKZ,aACnC,kBAAC,EAAD,Y,GAzBFoB,IAAMC,WCOJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3b57ccb.chunk.js","sourcesContent":["import React from \"react\";\nimport './styles.css'\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//Icons\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport IconButton from \"@material-ui/core/IconButton\";\n\nexport default class TopPageComponent extends React.Component {\n\n    handleDown = e =>{\n        e.preventDefault()\n        this.props.scrollDown();\n    }\n\n    render() {\n        return <div style={{overflowY: 'hidden', position: 'relative', width: '100vw', height: '100vh'}}>\n            <Container fluid style={{height: '100%'}}>\n                <div className={'bg-container'}>\n                    <img alt={'Background'}\n                         src={'https://www.theme-junkie.com/wp-content/uploads/Coding-Programming-Background-4.jpg'}\n                         className={'bg'}/>\n                </div>\n                <section className=\"scroll-down\">\n                    {/*eslint-disable-next-line*/}\n                    <a onClick={this.handleDown} href=\"\"><span></span><span></span><span></span>More</a></section>\n                <Row style={{height: '100%', width: '100%'}}>\n                    <Col md={7}>\n                        <div className={'vertical-middle'}>\n                            <h1 className={'name'}>Prathamesh Shiralkar</h1>\n                            <br/>\n                            <pre className={'summary'}>\n                                Full-stack developer who loves building robust and highly scalable systems and backends. DevOps and Cloud computing enthusiast. <br/> Budding competitive coder.\n                            </pre>\n                            <div className={'social-links-top'}>\n                                <IconButton href={'mailto://pnshiralkar@gmail.com'} target={'_blank'}>\n                                    <MailOutlineIcon fontSize={\"large\"} className={'social-link-icon'}/>\n                                </IconButton>\n                                <IconButton href={'https://github.com/pnshiralkar'} target={'_blank'}>\n                                    <GitHubIcon fontSize={\"large\"} className={'social-link-icon'}/>\n                                </IconButton>\n                                <IconButton href={'https://linkedin.com/in/pnshiralkar'} target={'_blank'}>\n                                    <LinkedInIcon fontSize={\"large\"} className={'social-link-icon'}/>\n                                </IconButton>\n                                <IconButton href={'https://instagram.com/pratham__99'} target={'_blank'}>\n                                    <InstagramIcon fontSize={\"large\"} className={'social-link-icon'}/>\n                                </IconButton>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col md={5}>\n                        <div className={'vertical-middle'}>\n                            <div className={'profile-pic-container'}>\n                                <img alt={''} style={{width: '100%'}}\n                                     src={'https://avatars2.githubusercontent.com/u/47828215?s=460&u=92b27caf8ef0a02ea67f9702de16cb0ce950909f&v=4'}/>\n                            </div>\n                        </div>\n\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    }\n}","import React from 'react';\nimport './App.css';\nimport ReactPageScroller from \"react-page-scroller\";\nimport TopPageComponent from \"./components/top-page/top-page.component\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currPage: null\n        }\n    }\n\n    handlePageChange = number => {\n        this.setState({currPage: number});\n    }\n\n    scrollDown = _ => {\n        this.setState({currPage: this.state.currPage+1})\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ReactPageScroller\n                    pageOnChange={this.handlePageChange}\n                    customPageNumber={this.state.currPage}\n                >\n                    <TopPageComponent scrollDown={this.scrollDown}/>\n                    <TopPageComponent/>\n                </ReactPageScroller>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}